cleaned_population_data<- cleaned_population_data %>%
select(`Short Postcode`, Town, District, Country)
#Importing cleaned population data
cleaned_population_data = read_csv("Clean-data/Cleaned Population.csv")
cleaned_population_data<- cleaned_population_data %>%
select(`Short Postcode`, Town, District, Country)
house_prices_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Clean House Prices.csv")
house_prices_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned House Prices.csv")
# Clean the Price column (convert to numeric)
house_prices_data$Price <- as.numeric(gsub("[^0-9.]", "", house_prices_data$Price))
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town/City`) %>%
summarise(`Average Price` = mean(Price))
# Arrange the data in ascending order based on average price
sorted_data <- grouped_data[order(grouped_data$`Average Price`), ]
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town/City`) %>%
summarise(`Average Price` = mean(Price))
house_prices_data
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Price` = mean(Price))
# Arrange the data in ascending order based on average price
sorted_data <- grouped_data[order(grouped_data$`Average Price`), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 best counties and town/cities to stay with the least house prices
print(top_10)
# Clean the Price column (convert to numeric)
house_prices_data$Price <- as.numeric(gsub("[^0-9.]", "", house_prices_data$Price))
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town/City`) %>%
summarise(`Average Price` = mean(Price))
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Price` = mean(Price))
# Assign a score to housing prices (higher score indicates affordability)
grouped_data <- grouped_data %>%
mutate(Score = 1 - scale(`Average Price`))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 best counties and town/cities with the least house prices and their scores
print(top_10[, c("County", "Town/City", "Average Price", "Score")])
# Print the top 10 best counties and town/cities with the least house prices and their scores
print(top_10[, c("County", "Town.City", "Average Price", "Score")])
#-------------------------------------------------------------------------------------------------
broadband_speed_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned Broadband Speed Dataset.csv")
# Group by County and Town/City, calculate the average download speed for each group
grouped_data <- broadband_speed_data %>%
group_by(County, `Town/City`) %>%
summarise(`Average Download Speed` = mean(`Average download speed (Mbit/s)`))
# Group by County and Town/City, calculate the average download speed for each group
grouped_data <- broadband_speed_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Download Speed` = mean(`Average download speed (Mbit/s)`))
# Assign a score to download speeds (higher score indicates better speed)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Average Download Speed`))
# Assign a score to download speeds (higher score indicates better speed)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Average Download Speed`))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the highest average download speed and their scores
print(top_10[, c("County", "Town/City", "Average Download Speed", "Score")])
# Print the top 10 towns/cities and counties with the highest average download speed and their scores
print(top_10[, c("County", "Town.City", "Average Download Speed", "Score")])
broadband_speed_data
# Group by County and Town/City, calculate the average download speed for each group
grouped_data <- broadband_speed_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Download Speed` = mean(`Average.download.speed..Mbit.s.`))
# Assign a score to download speeds (higher score indicates better speed)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Average Download Speed`))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the highest average download speed and their scores
print(top_10[, c("County", "Town.City", "Average Download Speed", "Score")])
#-------------------------------------------------------------------------------------------------------------------
crime_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned Crime Dataset.csv")
# Group by County and Town/City, calculate the average crime count for each group
grouped_data <- crime_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Crime Count` = mean(n))
crime_data
# Group by County and Town/City, calculate the average crime count for each group
grouped_data <- crime_data %>%
group_by(Falls.within, `Town.City`) %>%
summarise(`Average Crime Count` = mean(n))
# Assign a score to crime counts (lower score indicates lower crime)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Average Crime Count`, center = FALSE))
# Arrange the data in ascending order based on the score
sorted_data <- grouped_data[order(grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the lowest average crime count and their scores
print(top_10[, c("Falls.within", "Town.City", "Average Crime Count", "Score")])
crime_data
grouped_data <- crime_data %>%
group_by(County, `Town/City`) %>%
summarise(`Total Crime Count` = n())
grouped_data <- crime_data %>%
group_by(Falls.within, `Town.City`) %>%
summarise(`Total Crime Count` = n())
# Assign a score to total crime counts (lower score indicates lower crime)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Total Crime Count`, center = FALSE))
# Arrange the data in ascending order based on the score
sorted_data <- grouped_data[order(grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the lowest total crime count and their scores
print(top_10[, c("Falls.within", "Town.City", "Total Crime Count", "Score")])
grouped_data <- crime_data %>%
group_by(County, `Town/City`) %>%
summarise(`Total Crime Count` = n())
grouped_data <- crime_data %>%
group_by(Falls.within, `Town.City`) %>%
summarise(`Total Crime Count` = n())
# Assign a score to total crime counts (higher score indicates lower crime)
grouped_data <- grouped_data %>%
mutate(Score = rank(-`Total Crime Count`))
# Arrange the data in ascending order based on the score
sorted_data <- grouped_data[order(grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the lowest total crime count and their scores
print(top_10[, c("Falls.within", "Town.City", "Total Crime Count", "Score")])
grouped_data <- crime_data %>%
group_by(Falls.within, `Town.City`) %>%
summarise(`Total Crime Count` = n())
# Assign a score to total crime counts (higher score indicates lower crime)
grouped_data <- grouped_data %>%
mutate(Score = rank(`Total Crime Count`))
# Arrange the data in ascending order based on the score
sorted_data <- grouped_data[order(grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the lowest total crime count and their scores
print(top_10[, c("Falls.within", "Town.City", "Total Crime Count", "Score")])
# Read the CSV file
school_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned School Dataset.csv")
# Group by County and Town/City, calculate the average attainment score for each group
grouped_data <- school_data %>%
group_by(County, Town) %>%
summarise(`Average Attainment Score` = mean(`Attainment Score`))
school_data
# Group by County and Town/City, calculate the average attainment score for each group
grouped_data <- school_data %>%
group_by(County, Town) %>%
summarise(`Average Attainment Score` = mean(`Attainment.Score`))
# Assign a score to average attainment scores (higher score indicates higher attainment)
grouped_data <- grouped_data %>%
mutate(Score = rank(`Average Attainment Score`, na.last = "keep"))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10 <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the highest average attainment scores and their scores
print(top_10[, c("County", "Town", "Average Attainment Score", "Score")])
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
#-------------------------------------------------------------------------------------------------------------------
crime_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned Crime Dataset.csv")
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
View(combined_crime_data)
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(Falls.within,`Town.City`, TotalCrimes, CrimeScore)
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Falls.within`,`Town.City`, TotalCrimes, CrimeScore)
#---------------------------------------------------------------------------------------------------------
combined_scores <- merge(merge(merge(housing_scores, broadband_scores, by = c("County", "Town.City")),
crime_scores, by = c("Falls.within", "Town.City"), all.x = TRUE),
school_scores, by = c("County", "Town"), all.x = TRUE)
#---------------------------------------------------------------------------------------------------------
merged_data <- merge(top_10_housing, top_10_broadband, by = c("County", "Town.City"), all = TRUE)
merged_data <- merge(merged_data, top_10_crime, by = c("Falls.within", "Town.City"), all = TRUE)
house_prices_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned House Prices.csv")
# Clean the Price column (convert to numeric)
house_prices_data$Price <- as.numeric(gsub("[^0-9.]", "", house_prices_data$Price))
# Group by County and Town/City, calculate the average price for each group
grouped_data <- house_prices_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Price` = mean(Price))
# Assign a score to housing prices (higher score indicates affordability)
grouped_data <- grouped_data %>%
mutate(Score = 1 - scale(`Average Price`))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10_housing <- head(sorted_data, 10)
# Print the top 10 best counties and town/cities with the least house prices and their scores
print(top_10_housing[, c("County", "Town.City", "Average Price", "Score")])
#-------------------------------------------------------------------------------------------------
broadband_speed_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned Broadband Speed Dataset.csv")
broadband_speed_data
# Group by County and Town/City, calculate the average download speed for each group
grouped_data <- broadband_speed_data %>%
group_by(County, `Town.City`) %>%
summarise(`Average Download Speed` = mean(`Average.download.speed..Mbit.s.`))
# Assign a score to download speeds (higher score indicates better speed)
grouped_data <- grouped_data %>%
mutate(Score = scale(`Average Download Speed`))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10_broadband <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the highest average download speed and their scores
print(top_10_broadband[, c("County", "Town.City", "Average Download Speed", "Score")])
#-------------------------------------------------------------------------------------------------------------------
crime_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned Crime Dataset.csv")
grouped_data <- crime_data %>%
group_by(Falls.within, `Town.City`) %>%
summarise(`Total Crime Count` = n())
# Assign a score to total crime counts (higher score indicates lower crime)
grouped_data <- grouped_data %>%
mutate(Score = rank(`Total Crime Count`))
# Arrange the data in ascending order based on the score
sorted_data <- grouped_data[order(grouped_data$Score), ]
# Select the top 10 entries
top_10_crime <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the lowest total crime count and their scores
print(top_10_crime[, c("Falls.within", "Town.City", "Total Crime Count", "Score")])
# Read the CSV file
school_data <- read.csv("C:/Users/aasis/Desktop/DataScience-Assignment/Clean-data/Cleaned School Dataset.csv")
school_data
# Group by County and Town/City, calculate the average attainment score for each group
grouped_data <- school_data %>%
group_by(County, Town) %>%
summarise(`Average Attainment Score` = mean(`Attainment.Score`))
# Assign a score to average attainment scores (higher score indicates higher attainment)
grouped_data <- grouped_data %>%
mutate(Score = rank(`Average Attainment Score`, na.last = "keep"))
# Arrange the data in descending order based on the score
sorted_data <- grouped_data[order(-grouped_data$Score), ]
# Select the top 10 entries
top_10_school <- head(sorted_data, 10)
# Print the top 10 towns/cities and counties with the highest average attainment scores and their scores
print(top_10_school[, c("County", "Town", "Average Attainment Score", "Score")])
#---------------------------------------------------------------------------------------------------------
merged_data <- merge(top_10_housing, top_10_broadband, by = c("County", "Town.City"), all = TRUE)
merged_data <- merge(merged_data, top_10_crime, by = c("Falls.within", "Town.City"), all = TRUE)
merged_data <- merge(merged_data, top_10_school, by = c("County", "Town"), all = TRUE)
# Fill missing values with 0
merged_data[is.na(merged_data)] <- 0
#---------------------------------------------------------------------------------------------------------
merged_data <- merge(top_10_housing, top_10_broadband, by = c("County", "Town.City"), all = TRUE)
merged_data <- merge(merged_data, top_10_crime, by = c("Falls.within", "Town.City"), all = TRUE)
merged_data <- merge(merged_data, top_10_school, by = c("County", "Town"), all = TRUE)
# Fill missing values with 0
merged_data[is.na(merged_data)] <- 0
# Calculate the overall score (sum of individual scores)
merged_data$Overall_Score <- rowSums(merged_data[, c("Score.x", "Score.y", "Score.x.y", "Score.y.y")], na.rm = TRUE)
# Arrange the data in descending order based on the overall score
sorted_overall_data <- merged_data[order(-merged_data$Overall_Score), ]
# Select the top 10 entries
top_10_overall <- head(sorted_overall_data, 10)
# Print the top 10 places with the highest overall scores
print(top_10_overall[, c("County", "Town.City", "Overall_Score")])
#Importing cleaned population data
cleaned_population_data = read_csv("Clean-data/Cleaned Population.csv")
cleaned_population_data<- cleaned_population_data %>%
select(`Short Postcode`, Town, District, Country)
# Importing cleaned school data
cleaned_school_data <- read.csv("clean-data/Cleaned School Dataset.csv")
# Assuming the school data has columns like `Town/City` and `AttainmentScore`
ranking_school_attainment <- cleaned_school_data %>%
group_by(`Town`) %>%
summarise(Attainment.Score = mean(Attainment.Score)) %>%
arrange(desc(Attainment.Score)) %>%  # Arrange in descending order of attainment scores
mutate(SchoolScore = 10 - (Attainment.Score / max(Attainment.Score))) %>%
select(`Town`, Attainment.Score, SchoolScore)
cleaned_school_data=read.csv("Clean-data/Cleaned School Dataset.csv")
# Importing cleaned school data
cleaned_school_data <- read.csv("Clean-data/Cleaned School Dataset.csv")
# Assuming the school data has columns like `Town/City` and `AttainmentScore`
ranking_school_attainment <- cleaned_school_data %>%
group_by(`Town`) %>%
summarise(Attainment.Score = mean(Attainment.Score)) %>%
arrange(desc(Attainment.Score)) %>%  # Arrange in descending order of attainment scores
mutate(SchoolScore = 10 - (Attainment.Score / max(Attainment.Score))) %>%
select(`Town`, Attainment.Score, SchoolScore)
cleaned_broadband_data=read.csv("Clean-data/Cleaned Broadband Speed Dataset.csv")
colnames(cleaned_broadband_data)
# Assuming the broadband data has columns like `Town/City` and `Average.download.speed..Mbit.s.`
ranking_broadband_speed <- cleaned_broadband_data %>%
group_by(`Town.City`) %>%
summarise(AvgDownloadSpeed = mean(`Average.download.speed..Mbit.s.`)) %>%
arrange(desc(AvgDownloadSpeed)) %>%  # Arrange in descending order of average download speed
mutate(BroadbandScore = 10 - (AvgDownloadSpeed / max(AvgDownloadSpeed))) %>%
select(`Town.City`, AvgDownloadSpeed, BroadbandScore)
crime_data=read.csv("clean-data/Cleaned Crime Dataset.csv")
colnames(crime_data)
crime_data=read.csv("Clean-data/Cleaned Crime Dataset.csv")
colnames(crime_data)
# Importing cleaned crime data
crime_data <- read.csv("Clean-data/Cleaned Crime Dataset.csv")
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town/City", by.y = "Town", all = TRUE)
print("After merging house prices and school attainment:")
print(head(combined_data))
combined_data <- merge(combined_data, ranking_broadband_speed, by.x = "Town/City", by.y = "Town.City", all = TRUE)
print("After merging with broadband speed:")
print(head(combined_data))
combined_data <- merge(combined_data, combined_crime_data, by.x = "Town/City", by.y = "Town.City", all = TRUE)
print("After merging with crime data:")
print(head(combined_data))
# Fill missing values with 0 (if a city doesn't have data for a specific category)
combined_data[is.na(combined_data)] <- 0
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
print("After merging house prices and school attainment:")
print(head(combined_data))
combined_data <- merge(combined_data, ranking_broadband_speed, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with broadband speed:")
print(head(combined_data))
combined_data <- merge(combined_data, combined_crime_data, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with crime data:")
print(head(combined_data))
# Fill missing values with 0 (if a city doesn't have data for a specific category)
combined_data[is.na(combined_data)] <- 0
# Calculate total score (you can adjust the weights for each category as needed)
combined_data$TotalScore <- with(combined_data, HouseScore + SchoolScore + BroadbandScore + CrimeScore)
# Recommend city with the highest total score
recommended_city <- combined_data[which.max(combined_data$TotalScore), ]
# Print the recommended city
print("Recommended City:")
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
#Importing cleaned population data
cleaned_population_data = read_csv("Clean-data/Cleaned Population.csv")
cleaned_population_data<- cleaned_population_data %>%
select(`Short Postcode`, Town, District, Country)
#Importing cleaned house price data
cleaned_houseprices = read_csv("Clean-data/Cleaned House Prices.csv")
ranking_houseprices= cleaned_houseprices %>%
filter(`Date of Transfer`=="2020") %>%
group_by(`Town/City`) %>%
summarise(Price=mean(Price),County=first(County)) %>% #reducing the table by merging multiple same towns that belong to the same county
arrange(Price) %>%
mutate(HouseScore=10-(Price/100000)) %>%  #calculating score. We are subtracting from 10 because lower house prices need to have higher rank
select(`Town/City`,County, HouseScore)
cleaned_school_data=read.csv("Clean-data/Cleaned School Dataset.csv")
# Importing cleaned school data
cleaned_school_data <- read.csv("Clean-data/Cleaned School Dataset.csv")
# Assuming the school data has columns like `Town/City` and `AttainmentScore`
ranking_school_attainment <- cleaned_school_data %>%
group_by(`Town`) %>%
summarise(Attainment.Score = mean(Attainment.Score)) %>%
arrange(desc(Attainment.Score)) %>%  # Arrange in descending order of attainment scores
mutate(SchoolScore = 10 - (Attainment.Score / max(Attainment.Score))) %>%
select(`Town`, Attainment.Score, SchoolScore)
cleaned_broadband_data=read.csv("Clean-data/Cleaned Broadband Speed Dataset.csv")
colnames(cleaned_broadband_data)
# Assuming the broadband data has columns like `Town/City` and `Average.download.speed..Mbit.s.`
ranking_broadband_speed <- cleaned_broadband_data %>%
group_by(`Town.City`) %>%
summarise(AvgDownloadSpeed = mean(`Average.download.speed..Mbit.s.`)) %>%
arrange(desc(AvgDownloadSpeed)) %>%  # Arrange in descending order of average download speed
mutate(BroadbandScore = 10 - (AvgDownloadSpeed / max(AvgDownloadSpeed))) %>%
select(`Town.City`, AvgDownloadSpeed, BroadbandScore)
crime_data=read.csv("Clean-data/Cleaned Crime Dataset.csv")
colnames(crime_data)
# Importing cleaned crime data
crime_data <- read.csv("Clean-data/Cleaned Crime Dataset.csv")
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
print("After merging house prices and school attainment:")
print(head(combined_data))
combined_data <- merge(combined_data, ranking_broadband_speed, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with broadband speed:")
print(head(combined_data))
combined_data <- merge(combined_data, combined_crime_data, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with crime data:")
print(head(combined_data))
# Fill missing values with 0 (if a city doesn't have data for a specific category)
combined_data[is.na(combined_data)] <- 0
# Calculate total score (you can adjust the weights for each category as needed)
combined_data$TotalScore <- with(combined_data, HouseScore + SchoolScore + BroadbandScore + CrimeScore)
# Recommend city with the highest total score
recommended_city <- combined_data[which.max(combined_data$TotalScore), ]
#Importing cleaned house price data
cleaned_houseprices = read_csv("Clean-data/Cleaned House Prices.csv")
ranking_houseprices= cleaned_houseprices %>%
filter(`Date of Transfer`=="2020") %>%
group_by(`Town/City`) %>%
summarise(Price=mean(Price),County=first(County)) %>% #reducing the table by merging multiple same towns that belong to the same county
arrange(Price) %>%
mutate(HouseScore=10-(Price/100000)) %>%  #calculating score. We are subtracting from 10 because lower house prices need to have higher rank
select(`Town/City`,County, HouseScore)
print("After merging house prices and school attainment:")
print(head(combined_data))
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
print("After merging house prices and school attainment:")
print(head(combined_data))
combined_data <- merge(combined_data, ranking_broadband_speed, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with broadband speed:")
print(head(combined_data))
combined_data <- merge(combined_data, combined_crime_data, by.x = "Town.City", by.y = "Town.City", all = TRUE)
print("After merging with crime data:")
print(head(combined_data))
# Fill missing values with 0 (if a city doesn't have data for a specific category)
combined_data[is.na(combined_data)] <- 0
# Calculate total score (you can adjust the weights for each category as needed)
combined_data$TotalScore <- with(combined_data, HouseScore + SchoolScore + BroadbandScore + CrimeScore)
# Recommend city with the highest total score
recommended_city <- combined_data[which.max(combined_data$TotalScore), ]
# Print the recommended city
print("Recommended City:")
print(recommended_city)
library(tidyverse)
library(dplyr)
library(scales)
library(ggrepel)
#Importing cleaned population data
cleaned_population_data = read_csv("Clean-data/Cleaned Population.csv")
cleaned_population_data<- cleaned_population_data %>%
select(`Short Postcode`, Town, District, Country)
cleaned_school_data=read.csv("Clean-data/Cleaned School Dataset.csv")
# Importing cleaned school data
cleaned_school_data <- read.csv("Clean-data/Cleaned School Dataset.csv")
# Assuming the school data has columns like `Town/City` and `AttainmentScore`
ranking_school_attainment <- cleaned_school_data %>%
group_by(`Town`) %>%
summarise(Attainment.Score = mean(Attainment.Score)) %>%
arrange(desc(Attainment.Score)) %>%  # Arrange in descending order of attainment scores
mutate(SchoolScore = 10 - (Attainment.Score / max(Attainment.Score))) %>%
select(`Town`, Attainment.Score, SchoolScore)
cleaned_broadband_data=read.csv("Clean-data/Cleaned Broadband Speed Dataset.csv")
colnames(cleaned_broadband_data)
# Assuming the broadband data has columns like `Town/City` and `Average.download.speed..Mbit.s.`
ranking_broadband_speed <- cleaned_broadband_data %>%
group_by(`Town.City`) %>%
summarise(AvgDownloadSpeed = mean(`Average.download.speed..Mbit.s.`)) %>%
arrange(desc(AvgDownloadSpeed)) %>%  # Arrange in descending order of average download speed
mutate(BroadbandScore = 10 - (AvgDownloadSpeed / max(AvgDownloadSpeed))) %>%
select(`Town.City`, AvgDownloadSpeed, BroadbandScore)
crime_data=read.csv("Clean-data/Cleaned Crime Dataset.csv")
colnames(crime_data)
# Importing cleaned crime data
crime_data <- read.csv("Clean-data/Cleaned Crime Dataset.csv")
# Assuming the crime data has columns like "S_No", "Date.of.crime", "Falls.within", "Crime.type", "LSOA.Code", "Postcode", "Short.Postcode", "Town.City"
combined_crime_data <- crime_data %>%
group_by(`Town.City`) %>%
summarise(TotalCrimes = n()) %>%
arrange(TotalCrimes) %>%  # Arrange in ascending order of total crimes
mutate(CrimeScore = 10 - (TotalCrimes / max(TotalCrimes))) %>%
select(`Town.City`, TotalCrimes, CrimeScore)
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
print(recommended_city)
print("After merging house prices and school attainment:")
print(head(combined_data))
print(head(combined_data))
# Merge data frames# Merge data frames
combined_data <- merge(ranking_houseprices, ranking_school_attainment, by.x = "Town.City", by.y = "Town", all = TRUE)
